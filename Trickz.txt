grep | awk | sed 
TRICKZ

ionice -c 2 nice -n 19 

SELECT COMMAND FROM SESSIONS JOIN SESSIONCOMMANDS WHERE SESSION_ID=SESSIONS.ID AND SESSIONS.OPTION_ID = 101;
SELECT from PRODUCTS set PRODUCT_TYPE='simple' where PRODUCT_NAME='name;

Disable all Monitors:
update DEVICE_MONITOR_TEST set ENABLE=0;

select * from SESSIONS where NAME='<name>';

update DEVICE_MONITOR_TEST set ENABLE=1 where SESSION_ID=<ID>;

grep Checkpoint license expiration: 
grep -o -P  '..?Jan.*?_|..?Feb.*?_|..?Mar.*?_|..?Apr.*(?=.zip)|..?May.*?_|..?Jun.*?_|..?Jul.*?_|..?Aug.*?_|..?Sep.*?_|..?Oct.*?_|..?Nov.*?_|..?Dec.*?_'

cat cplic | grep -o -P  '..?Jan.*?....|..?Feb.*?....|..?Mar.*?....|..?Apr.*?....|..?May.*?....|..?Jun.*?....|..?Jul.*?....|..?Aug.*?....|..?Sep.*?....|..?Oct.*?....|..?Nov.*?....|..?Dec.*?....'

grab ip address: 
grep -E -o "([0-9]{1,3}[\.]){3}[0-9]{1,3}"

Find and Replace with Confirmation: 	:%s/UNIX/Linux/gc
Find and Replace Whole Word Only: 	:%s/\<UNIX\>/Linux/gc
Case sensitive Find and Replace: 	:%s/UNIX/bar/gI
Case Insensitive Find and Replace: 		:%s/unix/Linux/gi

 echo '345,0m0.047s' |
>     sed -n -r 's/^(.*),.*[^0-9]([0-9]*)\.(.*)s$/\1,\2\3/p'
345,0047

print from column to end
awk '{ print substr($0, index($0,$3)) }'

one line xml to normal
echo "<XML>" or cat file | xml_pp

Print the line immediately before a line that matches "/regex/" (but not the line that matches itself):
awk '/regex/ { print x }; { x=$0 }'
Print after:
awk '/regex/ { print (x=="" ? "match on line 1" : x) }; { x=$0 }'
sed -n '/ABC/,+1p' infile

grep lines with ONLY ONE "/"
grep -e '^[^/]*/[^/]*$'
Remove it
sed 's|/|:|g'

Replace string with new line:
perl -pe 's/(?<!^)(?=<STRING>)/\n/g' <filename>

Addstring to beginning of all matching lines:
sed '/<MATCH>/s/^/<STRING>/'

Addstring to beginning of all lines:
sed 's/^/<STRING>/'
rpm -qa --qf "%{NAME}\n"
Append a line to the next if it ends with a backslash "\"
sed -e :a -e '/\\$/N; s/\\\n//; ta'

Double-space a file.
sed G

Double-space a file which already has blank lines in it. Do it so that the output contains no more than one blank line between two lines of text.
sed '/^$/d;G'

Triple-space a file.
sed 'G;G'

Undo double-spacing.
sed 'n;d'

Insert a blank line above and below every line that matches "regex".
sed '/regex/{x;p;x;G;}'

Insert a blank line below every line that matches "regex".
sed '/regex/G'

Insert a blank line above every line that matches "regex".
sed '/regex/{x;p;x;}'

Delete trailing whitespace (tabs and spaces) from each line.
sed 's/[ \t]*$//'
Delete both leading and trailing whitespace from each line.
sed 's/^[ \t]*//;s/[ \t]*$//'

Addstring to end of all matching lines:
sed '/<MATCH>/s/$/ myalias/'

Addstring to end of all lines:
sed '/s/$/<string>/'

delete line with match X if next one has match Y
sed '/X/{$!N;/\n.*Y/!P;D}'

remove these craps: !@#\$%^&*<>"()
sed 's/[!@#\$%^&*<>"()]//g'

sed from line with match until line with match 1 s
sed 's/<MATCH>/,/<MATCH>//g'

sed from line with match until line with match in loop
sed '/<MATCH>/,/<MATCH>/!d;/;/p'

Grep numbers only:
grep --only-matching '[[:digit:]]\+'
awk '{gsub("[^[:digit:]]+"," ")}1'

delete everything after match: cut -d "<MATCH>" -f1
print everything after match: grep -o "<MATCH>.*"

find line with <MATCH> and replace <STR> with <MASHU>
sed '/<MATCH>/s/<STR>/<MASHU>/g'

Le guy bli revah
'/smtp_host/s/#[[:space:]]*//'

grep world containing match ONLY
grep -oh "\w*<MATCH>\w*"

remove characters
sed -e 's|[<THIS>\<THIS>]||g'

Print column after match:
awk -v srch="<PATTERN>" 'BEGIN{l=length(srch)}{t=match($0,srch);if(!t){next}$0=substr($0,t+l);print srch" "$2}' <filename> | awk '{print $1}'

Print lines that match any of "AAA" or "BBB", or "CCC":
awk '/AAA|BBB|CCC/'

GRAB BETWEEN Square Brackets:
awk 'NR>1{print $1}' RS=[ FS=] 

GRAB BETWEEN SINGLE QUOTES
grep -oP "(?<=').*?(?=')"

GRAB BETWEEN ()
grep -oP '(?<=\()[^\)]+'
awk -F'[()]' '{print $2}'
grep -oP '\(\K[^\)]+'
perl -lne '/\(\K[^\)]+/ and print $&'

sed remove between two strings:
sed 's/<STRING1>.*<STRING2>//'

grep between double quotes:
grep -o '".*"' | tr -d '"'

print word before match 
grep -E "MATCH" | cut -d "," -f2 | awk {print $1}'

grep -o -P '(?<=FROM HERE).*(?=TO HERE)'
awk -v FS="(FROM HERE|TO HERE)" '{print $2}'

grep -oh "\w*#\w*"

/backbox/backbox-3.0/bin/sendEmail -f alerts@backbox.co -t SENDER@backbox.co -s 172.31.255.1 -u MailTest -o message-file=

SED BREAKDOWN:
s/          <-- this means it should perform a substitution
.*          <-- this means match zero or more characters
\[          <-- this means match a literal [ character
\(          <-- this starts saving the pattern for later use
[^]]*       <-- this means match any character that is not a [ character
                the outer [ and ] signify that this is a character class
                having the ^ character as the first character in the class means "not"
\)          <-- this closes the saving of the pattern match for later use
\]          <-- this means match a literal ] character
.*          <-- this means match zero or more characters
/\1         <-- this means replace everything matched with the first saved pattern
               (the match between "\(" and "\)" )
/g          <-- this means the substitution is global (all occurrences on the line)
\< EXACT MATCH \>

grep match only:
grep -E -o '<MATCH>\w+'

clear file descriptors of deleted files:
lsof | grep "(deleted)$" | sed -re 's/^\S+\s+(\S+)\s+\S+\s+([0-9]+).*/\1\/fd\/\2/' | while read file; do bash -c ": > /proc/$file"; done

replace column value:
awk '{$<COL_NUMBER> = "<VALUE>"; print}'

Print difference of two files:
comm -13 <(sort file1) <(sort file2)

GET NAME FROM FUCKING ESCAPE CHARS:
sed 's/[0-9][0-9];[0-9][0-9]H//g' | egrep -o '[^][]+'

EMOJI:
¯\_(ツ)_/¯


encode password to URL
perl -MURI::Escape -lne 'print uri_escape($_)'
alias hashpass='echo $PASS | awk -F : '"'"'{for (i=1;i<=NF;i++) {print $i}}'"'"


^\w{0,10}$ # allows words of up to 10 characters.
^\w{5,}$   # allows words of more than 4 characters.
^\w{5,10}$ # allows words of between 5 and 10 characters.

mysql -uroot -pbackbox6 backboxV3 -ss -e "select CUSTOM_FIELD8 from DEVICES where HOST='172.31.253.201';"
mysql -uroot -pbackbox6 backboxV3 -ss -e "select ID from COMPLIANCE_SIGNATURES where COMPLIANCE_NAME like '%Juniper%';"
Checkpoint MDS\CMA cpmiquerybin

Standalone Firewalls:
GATEWAYS=( `cpmiquerybin attr "" network_objects "(type='gateway') & (location='internal')" -a __name__ | tr '\n' ' '` )
CLUSTERS=( `cpmiquerybin attr "" network_objects "(type='gateway_cluster') & (location='internal')" -a __name__ | tr '\n' ' '` )
CLUSTER MEMBERS=( `cpmiquerybin attr "" network_objects "(type='cluster_member') | (type='gateway') & (location='internal')" -a __name__ | tr '\n

get name of all objects of type cluster member
cpmiquerybin attr "" network_objects "type='cluster_member'" -a __name__

get cluster names and IP
cpmiquerybin attr "" network_objects "type='gateway_cluster'" -a __name__,ipaddr

To get a list of names of all VALID cluster members from cluster object name
cpmiquerybin object "" network_objects "" |grep -A 12 cluster_members |grep Name | awk -F "(" '{printf $2}' | sed -e 's/)/|/g'
cpmiquerybin attr "" network_objects "name='cluster_name'" -a cluster_members

anti-spoofing check on all firewall interfaces
fw="xxx"; cpmiquerybin object "" network_objects "name='$fw'" |grep anti_spoof

query all objects for an ip address
cpmiquerybin attr "" network_objects "ipaddr='<IP>'" -a __name__,ipaddr

from cma env, list management/cma objects
cpmiquerybin attr "" network_objects "management='true'" -a __name__,ipaddr 

All members of a group
cpmiquerybin object "" network_objects "name='group_name_goes_here'" | grep ":Name"

List services with 'Match for Any' ticked
cpmiquerybin attr "" services "include_in_any='true'" -a __name__

list all MDSs
cpmiquerybin attr "mdsdb" mdss "" -a __name__

list primary MDS
cpmiquerybin attr "mdsdb" mdss "primary='true'" -a __name__

list CMAs
cpmiquerybin attr "mdsdb" network_objects "management='true'" -a __name__,ipaddr

get IP for CLM name
cpmiquerybin attr "mdsdb" network_objects "name='Cluster1'" -a __name__,ipaddr

get CMA policy names
cpmiquerybin attr "" fw_policies "" -a __name__
get CMA list of policy collections 
cpmiquerybin attr "" policies_collections "" -a __name__

get installable targets for a policy named standard
cpmiquerybin attr "" policies_collections "name='Standar'" -a __name__,installable_targets

get secondary CMA
cpmiquerybin attr "" network_objects "(primary_management='false') & (management='true')" -a __name__

cpmiquerybin attr "" network_objects "type='gateway'|type='cluster_member'|type='gateway_cluster'" -a __name__,ipaddr,svn_version_name,appliance_type

list to table
 | awk 'BEGIN { print "<table>" }
     { print "<tr><td>" $1 "</td><td>" $2 "</td><tr>" }
     END   { print "</table>" }'
	 
	 cat toTable | awk 'BEGIN { print "<tbody>" }
     { print "<tr><td><strong>" $1 "</strong></td>" }
	 { print "<td>" $2 "</td></tr>" }
     END   { print "</tbody>" }'
	 
	 
MONITOR SOLUTION ID:
4.5 - select SOLUTION_ID, DEVICE_BACKUP_HISTORY.ID, DEVICE_MONITOR_ID, SESSION_ID from DEVICE_BACKUP_HISTORY JOIN DEVICE_MONITOR_TEST JOIN SESSIONS WHERE DEVICE_BACKUP_HISTORY.DEVICE_MONITOR_ID = DEVICE_MONITOR_TEST.ID AND  DEVICE_MONITOR_TEST.SESSION_ID = SESSIONS.ID AND DEVICE_BACKUP_HISTORY.ID=%%HID%%;

5 - select SOLUTION_ID, DEVICE_BACKUP_HISTORY.ID, DEVICE_MONITOR_ID, SESSION_ID from DEVICE_BACKUP_HISTORY JOIN DEVICE_MONITOR JOIN SESSIONS WHERE DEVICE_BACKUP_HISTORY.DEVICE_MONITOR_ID = DEVICE_MONITOR.ID AND  DEVICE_MONITOR.SESSION_ID = SESSIONS.ID AND DEVICE_BACKUP_HISTORY.ID=%%HID%%;

sed replace matching line: 
sed -i "/aaa=/c\aaa=xxx" your_file_here

sed add line after:
sed '/pam_unix.so/a\
auth        required      pam_faillock.so preauth silent deny=6 unlock_time=1800 fail_interval=900' file

sed add to end of matching line:
sed '/match/ s/$/ anotherthing/' file

sed add line before:
sed '/pam_unix.so/i\
<INSERT>' file

alias ..='cd ..'
alias sql='mysql -uroot -pbackbox6 backboxV3'
alias c='clear'
alias cls='clear;ls'
# Grabs the disk usage in the current directory
alias usage='du -ch | grep total'
alias ksh='du -ksh *'
# Gives you what is using the most space. Both directories and files. Varies on
# current directory
alias most='du -hsx * | sort -rh | head -10'
# ls aliases
alias lf='ls -alF --color=auto'
alias la='ls -al --color=auto'
alias ll='ls -l  --color=auto'
alias l='ls -l  --color=auto'
alias lh='ls -lh  --color=auto'
# create directory
alias md='mkdir -p'
alias t='tail -f '
alias bbx='service backbox restart'
alias network='service network restart'
alias f='find / -name'
alias fhere='find . -name'
alias iptables='service iptables restart'

diff -a --suppress-common-lines -y ACL ACL_baseline


sed -i 's\SSL_RSA_WITH_RC4_128_MD5, SSL_RSA_WITH_RC4_128_SHA ECDHE-RSA-AES256-GCM-SHA384\TLS_RSA_WITH_AES_128_CBC_SHA, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA, TLS_RSA_WITH_AES_128_CBC_SHA256, TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA256, SSL_RSA_WITH_3DES_EDE_CBC_SHA, TLS_ECDHE_RSA_WITH_3DES_EDE_CBC_SHA\g' /backbox/backbox-3.0/app-server/apache-tomcat-7.0.37/conf/server.xml

service backbox restart

